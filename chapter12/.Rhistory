predClass <-predict(lrFull,trainX)
sum(predict(lrFull,trainX)==trainY)/length(trainY)
library(caret)
library(caret)
sensitivity(data = predClass,
reference = trainY,
positive = "no")
specificity(data = predClass,
reference = trainY
negative = "yes")
specificity(data = predClass,
reference = trainY,
negative = "yes")
confusionMatrix(data =predClass,
reference = trainY,
positive = "no")
testX<-Transformedbio[-trainIndex,]
testY<-factor(newInjury[-trainIndex])
lrFull$pred$obs
lrFul
lrFull
lrFull$pred
str(lrFull)
############## chapter 12 ##############
## will use packeges: AppliedPredictiveModeling,
## caret, glmnet, MASS, pamr, pls, pROC, rms, sparseLDA, and subselect
#install.packages(c("glmnet", "pamr", "rms", "sparseLDA", "subselect"))
library(AppliedPredictiveModeling)
library(MASS)
## Simulate 4 predictors and a binary outcome (class 1 and class 2).
## X1 and X2 are related with y; cov(X1, X2)=sigma; X3 and X4 are noise;
## X3 is continouse and X4 is binary.
library(MASS)
set.seed(975)
quadFunc=function (n, sigma, pp)
{
sigma <- matrix(c(1, sigma, sigma, 2), 2, 2)
tmpData <- data.frame(mvrnorm(n = n, c(1, 0), sigma),
X3=rnorm(n), X4=sample(0:1, size=n, replace=TRUE,
prob=c(1-pp,pp)))
xSeq <- seq(-4, 4, length = 40)
plotGrid <- expand.grid(x = xSeq, y = xSeq)
zFoo <- function(x, y) -1 - 2 * x - 0 * y - 0.2 * x^2 + 2 *
y^2
z2p <- function(x) 1/(1 + exp(-x))
tmpData$prob <- z2p(zFoo(tmpData$X1, tmpData$X2))
tmpData$class <- factor(ifelse(runif(length(tmpData$prob)) <=
tmpData$prob, "Class1", "Class2"))
tmpData
}
simulatedTrain <- quadFunc(500, 0.7, 0.1)
simulatedTest <- quadFunc(1000, 0.7, 0.1)
head(simulatedTrain)
############ Logistic Regression ###############
## The glm function (for GLMs) in base R is commonly used to fit
## logistic regression models. The syntax is
levels(simulatedTrain$class)
modelFit <- glm(class ~ X1,
data = simulatedTrain,
## 'family' relates to the distribution of the data.
## A value of 'binomial' is used for logistic regression
family = binomial)
modelFit
summary(modelFit)
## The glm function treats the second factor level as the event of interest
## To get the probability of a successful grant, we subtract from one:
successTrainProb <- 1 - predict(modelFit,
## Predict for several days
newdata = simulatedTrain,
## glm does not predict the class, but can
## produce the probability of the event
type = "response"
)
round(successTrainProb,3)
head(successTrainProb)
predictTrainClass <- factor(ifelse(successTrainProb >=0.5, "Class1", "Class2"))
head(predictClass)
sum(predictTrainClass==simulatedTrain$class)/500 ## accuracy rate on training
library(caret)
sensitivity(data = predictTrainClass,
reference = simulatedTrain$class,
positive = "Class1")
specificity(data = predictTrainClass,
reference = simulatedTrain$class,
negative = "Class2")
confusionMatrix(data =predictTrainClass,
reference = simulatedTrain$class,
positive = "Class1")
library(pROC)
rocCurve <- roc(response = simulatedTrain$class,
predictor = successTrainProb,
## This function assumes that the second
## class is the event of interest, so we
## reverse the labels.
levels = rev(levels(simulatedTest$class)))
## From this object, we can produce statistics (such as the area
## under the ROC curve and its confidence interval):
auc(rocCurve)
ci.roc(rocCurve)
## We can also use the plot function to produce the ROC curve itself:
plot(rocCurve, legacy.axes = TRUE)
## To add the nonlinear term for the day of the year,
daySquaredModel <- glm(class ~ X1+X2+X3+X4+I((X1)^2),
data = simulatedTrain,
family = binomial)
daySquaredModel
summary(daySquaredModel)
## The glm function does not have a non-formula method, so creating models
## with a large number of predictors takes a little more work.
## An alternate solution is shown below.
## Another R function for logistic model is in the package called rms
## (for Regression Modeling Strategies). The lrm function
## is very similar to glm
## For a large set of predictors, the formula method for specifying models can
## be cumbersome. As in previous chapters, the train function can efficiently
## fit and validate models. For logistic regression, train provides an interface
## to the glm function that bypasses a model formula, directly produces class
## predictions, and calculates the area under the ROC curve and other metrics.
library(caret)
set.seed(476)
ctrl <- trainControl(summaryFunction = twoClassSummary,
classProbs = TRUE)
ctrl <- trainControl(method = "LGOCV",
summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm",
metric = "ROC",
trControl = ctrl)
lrFull
## The predictions for the holdout set (of year
## 2008 grants) is contained in the sub-object pred
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
## The ROC curve can also be computed and plotted using the pROC package:
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$Class1,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
lrFull
lrFull$pred
?roc
FullRoc <- roc(response = trainY,
predictor = predClass,
levels = (levels(trainY)))
predClass
as.character(predClass)
FullRoc <- roc(response = trainY,
predictor = as.character(predClass),
levels = (levels(trainY)))
FullRoc <- roc(response = trainY,
predictor = as.factor(predClass),
levels = (levels(trainY)))
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$Class1,
levels = rev(levels(lrFull$pred$obs)))
lrFull$pred$obs
lrFull$pred$Class1
rm(list=ls())
quadFunc=function (n, sigma, pp)
{
sigma <- matrix(c(1, sigma, sigma, 2), 2, 2)
tmpData <- data.frame(mvrnorm(n = n, c(1, 0), sigma),
X3=rnorm(n), X4=sample(0:1, size=n, replace=TRUE,
prob=c(1-pp,pp)))
xSeq <- seq(-4, 4, length = 40)
plotGrid <- expand.grid(x = xSeq, y = xSeq)
zFoo <- function(x, y) -1 - 2 * x - 0 * y - 0.2 * x^2 + 2 *
y^2
z2p <- function(x) 1/(1 + exp(-x))
tmpData$prob <- z2p(zFoo(tmpData$X1, tmpData$X2))
tmpData$class <- factor(ifelse(runif(length(tmpData$prob)) <=
tmpData$prob, "Class1", "Class2"))
tmpData
}
simulatedTrain <- quadFunc(500, 0.7, 0.1)
simulatedTest <- quadFunc(1000, 0.7, 0.1)
head(simulatedTrain)
levels(simulatedTrain$class)
ctrl <- trainControl(summaryFunction = twoClassSummary,classProbs = TRUE)
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm",
#metric = "ROC",
trControl = ctrl)
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm",
metric = "ROC",
trControl = ctrl)
lrFull
ctrl
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm")
lrFull
?train
head(lrFull$pred)
ctrl <- trainControl(summaryFunction = twoClassSummary,classProbs = TRUE)
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm",trControl=ctrl)
head(lrFull$pred)
ctrl <- trainControl(method = "LGOCV",
summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm",trControl=ctrl)
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
## The ROC curve can also be computed and plotted using the pROC package:
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$Class1,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm",metric = "ROC",trControl=ctrl)
lrFull
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(hepatic)
barplot(table(injury))
# a) Using stratified sampling
# b)accuracy.,confusion matrix
# c)Preprocessing the data Remove near zero var and correlated
nzro <- nearZeroVar(bio)
length(nzro)
dim(bio[,-nzro])
filteredbio <- bio[,-nzro]
filteredbio <- filteredbio[,-findCorrelation(cor(filteredbio))]
comboInfo <- findLinearCombos(filteredbio)
comboInfo$remove
# No linear combinations
preProcValues <- preProcess(filteredbio, method = c("center", "scale"))
Transformedbio <- predict(preProcValues, filteredbio)
#Logistic Regression
newInjury <- ifelse(injury == "Severe", "yes", "no")
trainIndex <- createDataPartition(newInjury, p = .8,list = FALSE,times = 1)
trainX<-Transformedbio[trainIndex,]
trainY<-factor(newInjury[trainIndex])
testX<-Transformedbio[-trainIndex,]
testY<-factor(newInjury[-trainIndex])
ctrl <- trainControl(method = "LGOCV",
summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(trainX,
y = trainY
method = "glm",metric = "ROC",trControl=ctrl)
lrFull <- train(trainX,
y = trainY,
method = "glm",metric = "ROC",trControl=ctrl)
lrFull
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
ctrl <- trainControl(summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(trainX,
y = trainY,
method = "glm",metric = "ROC",trControl=ctrl)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
lrFull
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$Class1,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$Class1,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
lrFull$pred$obs
lrFull$pred$Class1
lrFull$pred
str(lrFull)
lrFull$pred$yes
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$yes,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(hepatic)
barplot(table(injury))
# a) Using stratified sampling
# b)accuracy.,confusion matrix
# c)Preprocessing the data Remove near zero var and correlated
nzro <- nearZeroVar(bio)
length(nzro)
dim(bio[,-nzro])
filteredbio <- bio[,-nzro]
filteredbio <- filteredbio[,-findCorrelation(cor(filteredbio))]
comboInfo <- findLinearCombos(filteredbio)
comboInfo$remove
# No linear combinations
preProcValues <- preProcess(filteredbio, method = c("center", "scale"))
Transformedbio <- predict(preProcValues, filteredbio)
#Logistic Regression
newInjury <- ifelse(injury == "None", "yes", "no")
trainIndex <- createDataPartition(newInjury, p = .8,list = FALSE,times = 1)
trainX<-Transformedbio[trainIndex,]
trainY<-factor(newInjury[trainIndex])
testX<-Transformedbio[-trainIndex,]
testY<-factor(newInjury[-trainIndex])
ctrl <- trainControl(summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(trainX,
y = trainY,
method = "glm",metric = "ROC",trControl=ctrl)
lrFull
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
## The ROC curve can also be computed and plotted using the pROC package:
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$yes,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
rm(list=ls())
rm(list=ls())
library(AppliedPredictiveModeling)
library(MASS)
set.seed(975)
quadFunc=function (n, sigma, pp)
{
sigma <- matrix(c(1, sigma, sigma, 2), 2, 2)
tmpData <- data.frame(mvrnorm(n = n, c(1, 0), sigma),
X3=rnorm(n), X4=sample(0:1, size=n, replace=TRUE,
prob=c(1-pp,pp)))
xSeq <- seq(-4, 4, length = 40)
plotGrid <- expand.grid(x = xSeq, y = xSeq)
zFoo <- function(x, y) -1 - 2 * x - 0 * y - 0.2 * x^2 + 2 *
y^2
z2p <- function(x) 1/(1 + exp(-x))
tmpData$prob <- z2p(zFoo(tmpData$X1, tmpData$X2))
tmpData$class <- factor(ifelse(runif(length(tmpData$prob)) <=
tmpData$prob, "Class1", "Class2"))
tmpData
}
simulatedTrain <- quadFunc(500, 0.7, 0.1)
simulatedTest <- quadFunc(1000, 0.7, 0.1)
head(simulatedTrain)
levels(simulatedTrain$class)
#logistic
ctrl <- trainControl(method = "LGOCV",
summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm",metric = "ROC",trControl=ctrl)
lrFull
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
## The ROC curve can also be computed and plotted using the pROC package:
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$Class1,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
daySquaredModel <- glm(class ~ X1+X2+X3+X4,
data = simulatedTrain,
family = binomial)
daySquaredModel
summary(daySquaredModel)
modelFit <- glm(class ~ X1,
data = simulatedTrain,
## 'family' relates to the distribution of the data.
## A value of 'binomial' is used for logistic regression
family = binomial)
modelFit
successTrainProb <- 1 - predict(modelFit,
## Predict for several days
newdata = simulatedTrain,
## glm does not predict the class, but can
## produce the probability of the event
type = "response"
)
round(successTrainProb,3)
head(successTrainProb)
predictTrainClass <- factor(ifelse(successTrainProb >=0.5, "Class1", "Class2"))
head(predictClass)
confusionMatrix(data =predictTrainClass,
reference = simulatedTrain$class,
positive = "Class1")
lrFull <- train(simulatedTrain[,1:4],
y = simulatedTrain$class,
method = "glm",metric = "ROC",trControl=ctrl)
lrFull
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$Class1,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(hepatic)
barplot(table(injury))
nzro <- nearZeroVar(bio)
length(nzro)
dim(bio[,-nzro])
filteredbio <- bio[,-nzro]
filteredbio <- filteredbio[,-findCorrelation(cor(filteredbio))]
comboInfo <- findLinearCombos(filteredbio)
comboInfo$remove
# No linear combinations
preProcValues <- preProcess(filteredbio, method = c("center", "scale"))
Transformedbio <- predict(preProcValues, filteredbio)
#Logistic Regression
newInjury <- ifelse(injury == "None", "yes", "no")
trainIndex <- createDataPartition(newInjury, p = .8,list = FALSE,times = 1)
trainX<-Transformedbio[trainIndex,]
trainY<-factor(newInjury[trainIndex])
testX<-Transformedbio[-trainIndex,]
testY<-factor(newInjury[-trainIndex])
ctrl <- trainControl(summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(trainX,
y = trainY,
method = "glm",metric = "ROC",trControl=ctrl)
lrFull
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$yes,
levels = rev(levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$yes,
levels = (levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
newInjury <- ifelse(injury == "Mild", "yes", "no")
trainIndex <- createDataPartition(newInjury, p = .8,list = FALSE,times = 1)
trainX<-Transformedbio[trainIndex,]
trainY<-factor(newInjury[trainIndex])
testX<-Transformedbio[-trainIndex,]
testY<-factor(newInjury[-trainIndex])
ctrl <- trainControl(summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(trainX,
y = trainY,
method = "glm",metric = "ROC",trControl=ctrl)
lrFull
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
## The ROC curve can also be computed and plotted using the pROC package:
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$yes,
levels = (levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
newInjury <- ifelse(injury == "Severe", "yes", "no")
trainIndex <- createDataPartition(newInjury, p = .8,list = FALSE,times = 1)
trainX<-Transformedbio[trainIndex,]
trainY<-factor(newInjury[trainIndex])
testX<-Transformedbio[-trainIndex,]
testY<-factor(newInjury[-trainIndex])
ctrl <- trainControl(summaryFunction = twoClassSummary,
classProbs = TRUE,
##index = list(simulatedTest[,1:4]),
savePredictions = TRUE)
lrFull <- train(trainX,
y = trainY,
method = "glm",metric = "ROC",trControl=ctrl)
lrFull
head(lrFull$pred)
confusionMatrix(data = lrFull$pred$pred,
reference = lrFull$pred$obs)
## The ROC curve can also be computed and plotted using the pROC package:
FullRoc <- roc(response = lrFull$pred$obs,
predictor = lrFull$pred$yes,
levels = (levels(lrFull$pred$obs)))
plot(FullRoc, legacy.axes = TRUE)
auc(FullRoc)
