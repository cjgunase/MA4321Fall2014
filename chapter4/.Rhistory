View(Soybean)
View(Soybean)
mat <- matrix(sample(3, 200000, TRUE), 2000)
mat[sample(200000, 20)] <- NA
View(mat)
View(mat)
require(imputation)
install.packages("imputation")
# Generate a data set consisting of 200 rows and 50 columns
# in which the values are integers between 1 and 3.
# Afterwards, remove 20 of the values randomly.
mat <- matrix(sample(3, 10000, TRUE), 200)
mat[sample(10000, 20)] <- NA
# Replace the missing values.
mat2 <- knncatimpute(mat)
# Replace the missing values using the 5 nearest neighbors
# and Cohen's Kappa.
mat3 <- knncatimpute(mat, nn = 5, dist = "cohen")
?knncatimpute
install.packages("DMwR")
library(DMwR)
mat <- matrix(sample(3, 10000, TRUE), 200)
mat[sample(10000, 20)] <- NA
# Replace the missing values.
mat2 <- knncatimpute(mat)
install.packages("scrime")
library(scrime)
mat <- matrix(sample(3, 10000, TRUE), 200)
mat[sample(10000, 20)] <- NA
# Replace the missing values.
mat2 <- knncatimpute(mat)
# Replace the missing values using the 5 nearest neighbors
# and Cohen's Kappa.
mat3 <- knncatimpute(mat, nn = 5, dist = "cohen")
View(mat2)
View(mat2)
mat <- matrix(sample(3, 10000, TRUE), 200)
mat[sample(10000, 20)] <- NA
View(mat)
View(mat)
library(scrime)
Soybean2 <- knncatimpute(Soybean)
data.matrix(Soybean, rownames.force = NA)
Soybean_mat <- data.matrix(Soybean, rownames.force = NA)
Soybean2 <- knncatimpute(Soybean_mat)
View(Soybean2)
View(Soybean2)
Soybean2 <- knncatimpute(Soybean_mat,nn = 3)
View(Soybean2)
View(Soybean2)
Soybean_imp <- knncatimpute(Soybean_mat,nn = 3)
summary(Soybean_imp)
as.data.frame(Soybean_imp)
Soybean_imp <- as.data.frame(Soybean_imp)
summary(Soybean_imp)
str(Soybean_imp)
summary(Soybean)
library(caret)
removeColumns <-nearZeroVar(BloodBrain)
data(BloodBrain)
removeColumns <-nearZeroVar(BloodBrain)
removeColumns <-nearZeroVar(bbbDescr)
names(bbbDescr)[removeColumns]
```{r,echo=TRUE}
length(highCorr)
highCorr <- findCorrelation(corrrelation, cutoff = .75,verbose=FALSE)
library(corrplot)
corrplot(corrrelation, order = "hclust")
corrrelation <- cor(bbbDescr)
dim(corrrelation)
corrrelation[1:4, 1:4]
library(corrplot)
corrplot(corrrelation, order = "hclust")
highCorr <- findCorrelation(corrrelation, cutoff = .75,verbose=FALSE)
length(highCorr)
head(highCorr)
?par
?barplot
require(grDevices) # for colours
tN <- table(Ni <- stats::rpois(100, lambda = 5))
r <- barplot(tN, col = rainbow(20))
#- type = "h" plotting *is* 'bar'plot
lines(r, tN, type = "h", col = "red", lwd = 2)
barplot(tN, space = 1.5, axisnames = FALSE,
sub = "barplot(..., space= 1.5, axisnames = FALSE)")
barplot(VADeaths, plot = FALSE)
barplot(VADeaths, plot = FALSE, beside = TRUE)
mp <- barplot(VADeaths) # default
tot <- colMeans(VADeaths)
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend = rownames(VADeaths), ylim = c(0, 100))
title(main = "Death Rates in Virginia", font.main = 4)
hh <- t(VADeaths)[, 5:1]
mybarcol <- "gray20"
mp <- barplot(hh, beside = TRUE,
col = c("lightblue", "mistyrose",
"lightcyan", "lavender"),
legend = colnames(VADeaths), ylim = c(0,100),
main = "Death Rates in Virginia", font.main = 4,
sub = "Faked upper 2*sigma error bars", col.sub = mybarcol,
cex.names = 1.5)
segments(mp, hh, mp, hh + 2*sqrt(1000*hh/100), col = mybarcol, lwd = 1.5)
stopifnot(dim(mp) == dim(hh))  # corresponding matrices
mtext(side = 1, at = colMeans(mp), line = -2,
text = paste("Mean", formatC(colMeans(hh))), col = "red")
# Bar shading example
barplot(VADeaths, angle = 15+10*1:5, density = 20, col = "black",
legend = rownames(VADeaths))
title(main = list("Death Rates in Virginia", font = 4))
# border :
barplot(VADeaths, border = "dark blue")
# log scales (not much sense here):
barplot(tN, col = heat.colors(12), log = "y")
barplot(tN, col = gray.colors(20), log = "xy")
# args.legend
barplot(height = cbind(x = c(465, 91) / 465 * 100,
y = c(840, 200) / 840 * 100,
z = c(37, 17) / 37 * 100),
beside = FALSE,
width = c(465, 840, 37),
col = c(1, 2),
legend.text = c("A", "B"),
args.legend = list(x = "topleft"))
rm(list=ls())
library(mlbench)
data(Soybean)
library(caret)
removeColumns <-nearZeroVar(Soybean)
names(Soybean)[removeColumns]
image(is.na(Soybean), main = "Missing Values", xlab = "Observation", ylab = "Variable",
xaxt = "n", yaxt = "n", bty = "n")
data(Soybean)
barplot(table(Soybean$leaf.mild)/683)
barplot(table(Soybean$mycelium)/683)
barplot(table(Soybean$sclerotia)/683)
summary(Soybean)
table(Soybean)
barplot(table(Soybean$leaf.mild)/683)
barplot(table(Soybean)/683)
library(vcd)
mosaic(Soybean, shade=TRUE, legend=TRUE)
install.packages("vcd")
library(vcd)
library(vcd)
mosaic(Soybean, shade=TRUE, legend=TRUE)
mosaic(Soybean, shade=TRUE, legend=TRUE)
require(stats)
mosaicplot(Titanic, main = "Survival on the Titanic", color = TRUE)
## Formula interface for tabulated data:
mosaicplot(~ Sex + Age + Survived, data = Titanic, color = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)
## Independence model of hair and eye color and sex.  Indicates that
## there are more blue eyed blonde females than expected in the case
## of independence and too few brown eyed blonde females.
## The corresponding model is:
fm <- loglin(HairEyeColor, list(1, 2, 3))
pchisq(fm$pearson, fm$df, lower.tail = FALSE)
mosaicplot(HairEyeColor, shade = TRUE, margin = list(1:2, 3))
## Model of joint independence of sex from hair and eye color.  Males
## are underrepresented among people with brown hair and eyes, and are
## overrepresented among people with brown hair and blue eyes.
## The corresponding model is:
fm <- loglin(HairEyeColor, list(1:2, 3))
pchisq(fm$pearson, fm$df, lower.tail = FALSE)
## Formula interface for raw data: visualize cross-tabulation of numbers
## of gears and carburettors in Motor Trend car data.
mosaicplot(~ gear + carb, data = mtcars, color = TRUE, las = 1)
# color recycling
mosaicplot(~ gear + carb, data = mtcars, color = 2:3, las = 1)
require(stats)
mosaicplot(Titanic, main = "Survival on the Titanic", color = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
fm <- loglin(HairEyeColor, list(1:2, 3))
pchisq(fm$pearson, fm$df, lower.tail = FALSE)
## Formula interface for raw data: visualize cross-tabulation of numbers
## of gears and carburettors in Motor Trend car data.
mosaicplot(~ gear + carb, data = mtcars, color = TRUE, las = 1)
table(Soybean)
x <-1:20
x
x <- c(0.5,0.6)
x ,- c(T,F)
x <- c(T,F)
y<- c(T,F)
x <-9:29
c<-c(1+0i,2+3i)
x <- vector("numeric",length=10)
y <-c(1.7,"a")
y <- c(TRUE,2)
y <-c("a",TRUE)
x <-0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
as.numeric(x)
x <- c("a","b","c")
as.numeric(x)
m <- matrix(nrow=2,ncol=3)
m
dim(m)
attributes(m)
m <- matrix(1:6,nrow=2,ncol=3)
m
m <- matrix(1:6,nrow=2,ncol=3)
m
m <- matrix(1:6,nrow=2,ncol=3)
m
m <- matrix(1:6,nrow=2,ncol=3)
m
dim(m)
dim(m) <-c(2,5)
m <- 1:10
dim(m) <-c(2,5)
m
x <-1:3
y <-10:12
cbind(x,y)
rbind(x,y)
x <- list(1,"a",TRUE,1+4i)
x
x <- factors(c("y","y","n","n"))
x <- factor(c("y","y","n","n"))
x
unclass(x)
x <-factor(c("yes","no","yes","no"),levels=c("yes","no"))
x
x <-factor(c("yes","no","yes","no"),levels=c("yes","no","na"))
x
x <-factor(c("yes","no","yes","no"))
x
x <- data.frame(foo=1:4,bar=c(T,T,F,F))
X
X
x
nrow(x)
ncol(x)
names(x)
names(x) <-c("foo","bar","norf")
x
x <-1:3
names(x)
names(x) <-c("foo","bar","norf")
x
x <-list(a=1,b=2,c=3)
x
m <-matrix(1:4,nrow=2,ncol=2)
m
dimnames(m) <- list(c("a","b"),c("c","d"))
m
rm(list = ls())
library(caret)
data(oil)
str(oilType)
barplot(table(oilType),main="oilType")
table(oilType)
barplot(table(oilType))
table(oilType)
barplot(table(oilType))
barplot(table(oilType))
barplot(table(oilType[sample((1:96),60,replace=TRUE,prob=NULL )]),main="oilType in random60 using sample function")
rm(list = ls())
data(oil)
barplot(table(oilType),main="oilType")
barplot(table(oilType),main="oilType")
barplot(table(oilType),main="oilType")
barplot(table(oilType),main="oilType")
barplot(table(oilType[sample((1:96),60,replace=TRUE,prob=NULL )]),main="oilType in random60 using sample function")
barplot(table(oilType[sample((1:96),60,replace=TRUE,prob=NULL )]),main="oilType in random60 using sample function")
barplot(table(oilType[sample((1:96),60,replace=TRUE,prob=NULL )]),main="oilType in random60 using sample function")
barplot(table(oilType[sample((1:96),60,replace=TRUE,prob=NULL )]),main="oilType in random60 using sample function")
barplot(table(oilType[sample((1:96),60,replace=TRUE,prob=NULL )]),main="oilType in random60 using sample function")
barplot(table(oilType[sample((1:96),60,replace=TRUE,prob=NULL )]),main="oilType in random60 using sample function")
x <- createDataPartition(oilType,times=1,p=0.66)
barplot(table(oilType[x$Resample1]),main="oilType training set using createDataPartition function")
barplot(table(oilType[x$Resample1]),main="oilType training set using createDataPartition function")
barplot(table(oilType),main="oilType")
barplot(table(oilType[x$Resample1]),main="oilType training set using createDataPartition function - 01")
barplot(table(oilType),main="oilType")
barplot(table(oilType[x$Resample1]),main="oilType training set using createDataPartition function - 02")
barplot(table(oilType),main="oilType")
binom.test
binom.test(16,20)
binom.test(123,200)
binom.test(190,200)
binom.test(160,200)
binom.test(19,25)
list(binom.test(16,20))
binom.test(19,25)
binom.test(19,25)[1]
binom.test(19,25)[2]
binom.test(19,25)[3]
binom.test(19,25)[4]
binom.test(19,25)[5]
?binom.test
binom.test(16,20)
binom.test(160,200)
binom.test(16,20)
binom.test(160,200)
binom.test(1600,2000)
binom.test(16,20)[4]
binom.test(160,200)[4]
binom.test(1600,2000)[4]
binom.test(8,10)
binom.test(8,10)[4]
binom.test(16,20)[4]
binom.test(160,200)[4]
binom.test(1600,2000)[4]
plotCI
binom.test(8,10,conf.level=0.99)[4]
binom.test(1600,2000,conf.level=0.99)[4]
binom.test(1600,2000,conf.level=0.9)[4]
binom.test(1600,2000,conf.level=0.8)[4]
require(plotrix)
install.packages("plotrix")
libarary("plotrix")
library("plotrix")
set.seed(0815)
x <- 1:10
F <- runif(10,1,2)
L <- runif(10,0,1)
U <- runif(10,2,3)
require(plotrix)
plotCI(x, F, ui=U, li=L)
set.seed(0815)
x <- 1:10
x
F <- runif(10,1,2)
F
x <- 1:3
F <- c(2,2,2)
L <- c(0.5,1,1.5)
U <- c(2.3,2.5,2.6)
require(plotrix)
plotCI(, F, ui=U, li=L)
plotCI(x, F, ui=U, li=L)
x <- 1:3
F <- c(2,2,2)
L <- c(0.5,1,1.5)
U <- c(2.3,2.5,2.6)
require(plotrix)
plotCI(x, F, ui=U, li=L)
binom.test(8,10)[4][1]
binom.test(8,10)[4][1]
binom.test(8,10)$conf.int[1]
binom.test(8,10)$conf.int[2]
binom.test(8,10)$conf.int[1]
x <- 1:4
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
require(plotrix)
plotCI(x, F, ui=U, li=L)
plotCI(x, F, ui=U, li=L,title="different sample sizes")
plotCI(x, F, ui=U, li=L,xlab="different sample sizes")
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="different sample sizes")
plotCI(x, F, ui=U, li=L,xlab="different sample sizes",ylab="prob. of success with CI")
x <- c(1,2,3,4)
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
x <- c("8/10",2,3,4)
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
x <- c("8/10","16/20","160/200","1600/2000")
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
x <- c(8/10,16/20,160/200,1600/2000)
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
x <- list("a","b","c","d")
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
x <- c(1:4)
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
x <- c(1:4)
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(8,10)$conf.int[1],binom.test(16,20)$conf.int[1],binom.test(160,200)$conf.int[1],binom.test(1600,2000)$conf.int[1])
U <- c(binom.test(8,10)$conf.int[2],binom.test(16,20)$conf.int[2],binom.test(160,200)$conf.int[2],binom.test(1600,2000)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
x <- c(1:4)
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(16,20,conf.int=.99)$conf.int[1],binom.test(16,20,conf.int=.95)$conf.int[1],binom.test(16,20,conf.int=.9)$conf.int[1],binom.test(16,20,conf.int=.85)$conf.int[1])
U <- c(binom.test(16,20,conf.int=.99)$conf.int[2],binom.test(16,20,conf.int=.95)$conf.int[2],binom.test(16,20,conf.int=.9)$conf.int[2],binom.test(16,20,conf.int=.85)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
?binom.test
x <- c(1:4)
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(16,20,conf.level=.99)$conf.int[1],binom.test(16,20,conf.level=.95)$conf.int[1],binom.test(16,20,conf.level=.9)$conf.int[1],binom.test(16,20,conf.level=.85)$conf.int[1])
U <- c(binom.test(16,20,conf.level=.99)$conf.int[2],binom.test(16,20,conf.level=.95)$conf.int[2],binom.test(16,20,conf.level=.9)$conf.int[2],binom.test(16,20,conf.level=.85)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different sample sizes",ylab="Prob. of success with CI")
x <- c(1:4)
F <- c(0.8,0.8,0.8,0.8)
L <- c(binom.test(16,20,conf.level=.99)$conf.int[1],binom.test(16,20,conf.level=.95)$conf.int[1],binom.test(16,20,conf.level=.9)$conf.int[1],binom.test(16,20,conf.level=.85)$conf.int[1])
U <- c(binom.test(16,20,conf.level=.99)$conf.int[2],binom.test(16,20,conf.level=.95)$conf.int[2],binom.test(16,20,conf.level=.9)$conf.int[2],binom.test(16,20,conf.level=.85)$conf.int[2])
plotCI(x, F, ui=U, li=L,xlab="Different Accuracy rates",ylab="Prob. of success with CI")
?plotCI
music<- read.csv("genresTrain.csv")
attach(music)
music<- read.csv("genresTrain.csv")
pwd()
setwd("C:/Users/Chathura/Google Drive/course work/Predictive Modeling/chapter4")
music<- read.csv("genresTrain.csv")
music<- read.csv("genresTrain.csv")
attach(music)
library(AppliedPredictiveModeling)
barplot(table(music[192]))
barplot(table(music[192]),main="Frequency distribution")
set.seed(1);trainingRows <- createDataPartition(music$GENRE,p=0.80,list=FALSE)
library(caret)
#install.packages("proxy")
library(proxy)
set.seed(1);trainingRows <- createDataPartition(music$GENRE,p=0.80,list=FALSE)
head(trainingRows)
train_music<-music[trainingRows,]
train_classes<-GENRE[trainingRows]
test_music <-music[-trainingRows,]
test_classes <- GENRE[-trainingRows]
library(AppliedPredictiveModeling)
data(permeability)
per_data <-cbind(permeability,fingerprints)
library(AppliedPredictiveModeling)
data(permeability)
per_data <-cbind(permeability,fingerprints)
library(AppliedPredictiveModeling)
data(permeability)
per_data <-cbind(permeability,fingerprints)
data(permeability)
View(fingerprints)
View(fingerprints)
View(permeability)
View(permeability)
View(permeability)
View(permeability)
View(fingerprints)
View(fingerprints)
per_data <-cbind(permeability,fingerprints)
str(per_data)
library(AppliedPredictiveModeling)
data(ChemicalManufacturingProcess)
Rsqared <- cbind((1:10),c(0.444,0.5,0.533,0.545,0.542,0.537,0.534,0.534,0.520,0.507))
plot(Rsqared,xlab="Components",ylab="Resampled R-Squared")
lines(Rsqared)
plot(Rsqared,xlab="Components",ylab="Resampled R-Squared",title="R-sqred vs No of components")
plot(Rsqared,xlab="Components",ylab="Resampled R-Squared",main="R-sqred vs No of components")
lines(Rsqared)
0.545-0.0308
.545-.10
mean <- c(0.444,0.5,0.533,0.545,0.542,0.537,0.534,0.534,0.520,0.507)
tol <- (mean-0.545)/0.545
tol*100
.545-.10
mean <- c(0.444,0.5,0.533,0.545,0.542,0.537,0.534,0.534,0.520,0.507)
tol <- ((mean-0.545)/0.545)*100
table<-cbind(Rsqared,tol)
table
table<-data.frame(Rsqared,tol)
table
head(table)
names(table)
names(table) <- c("PLS Comp","R-Sq","Tol")
table
?data.frame
table<-data.frame(Rsqared,tol,check.rows=FALSE)
names(table) <- c("PLS Comp","R-Sq","Tol")
table
table<-data.frame(Rsqared,tol,check.rows=TRUE)
names(table) <- c("PLS Comp","R-Sq","Tol")
table
per_data <-cbind(permeability,fingerprints)
repeatSplits <-createDataPartition(permeability,p=0.8,times=3)
library(caret)
library(caret)
library(caret)
set.seed(1);trainingRows <- createDataPartition(music$GENRE,p=0.80,list=FALSE)
music<- read.csv("genresTrain.csv")
library(AppliedPredictiveModeling)
barplot(table(music[192]),main="Frequency Distribution of classes")
library(caret)
library(proxy)
```
set.seed(1);trainingRows <- createDataPartition(music$GENRE,p=0.80,list=FALSE)
head(trainingRows)
train_music<-music[trainingRows,]
train_classes<-GENRE[trainingRows]
test_music <-music[-trainingRows,]
test_classes <- GENRE[-trainingRows]
str(test_classes)
startSet <- sample(1:dim(train_music)[1], 5)
samplePool <- train_music[-startSet, ]
start <- train_music[startSet, ]
newSamp <- maxDissim(start, samplePool, n = 4)
source('~/.active-rstudio-document', echo=TRUE)
