trainX<-Transformedbio[trainIndex,]
trainY<-factor(injury[trainIndex])
testX<-Transformedbio[-trainIndex,]
testY<-factor(injury[-trainIndex])
newInjury <- ifelse(injury == "Severe", "yes", "no")
table(newInjury)
barplot(table(newInjury))
trainIndex <- createDataPartition(newInjury, p = .8,list = FALSE,times = 1)
trainX<-Transformedbio[trainIndex,]
trainY<-factor(newInjury[trainIndex])
testX<-Transformedbio[-trainIndex,]
testY<-factor(newInjury[-trainIndex])
ctrl <- trainControl(method = "LGOCV",summaryFunction = twoClassSummary,classProbs = TRUE,savePredictions = TRUE)
lrSevere <- train(trainX,y = trainY,method = "glm",metric = "ROC",trControl=ctrl)
lrSevere
confusionMatrix(data = lrSevere$pred$pred,reference = lrSevere$pred$obs,positive="yes")
Roc <- roc(response = lrSevere$pred$obs,predictor = lrSevere$pred$yes,levels = rev(levels(lrSevere$pred$obs)))
plot(Roc, legacy.axes = TRUE)
confusionMatrix(predict(lrSevere,testX),testY,positive="yes")
newInjury <- ifelse(injury == "None", "yes", "no")
table(newInjury)
barplot(table(newInjury))
trainIndex <- createDataPartition(newInjury, p = .8,list = FALSE,times = 1)
trainX<-Transformedbio[trainIndex,]
trainY<-factor(newInjury[trainIndex])
testX<-Transformedbio[-trainIndex,]
testY<-factor(newInjury[-trainIndex])
ctrl <- trainControl(method = "LGOCV",summaryFunction = twoClassSummary,classProbs = TRUE,savePredictions = TRUE)
lrNone <- train(trainX,y = trainY,method = "glm",metric = "ROC",trControl=ctrl)
lrNone
confusionMatrix(data = lrNone$pred$pred,reference = lrNone$pred$obs,positive="yes")
Roc <- roc(response = lrNone$pred$obs,predictor = lrNone$pred$yes,levels = rev(levels(lrNone$pred$obs)))
plot(Roc, legacy.axes = TRUE)
confusionMatrix(predict(lrNone,testX),testY,positive="yes")
library(C50)
library(caret)
data(churn)
dataset <-rbind(churnTrain,churnTest)
# Remove Area code and state
dataset<-dataset[,-c(1,3)]
#create 1 | 0 for yes | no
dataset[,2] <- as.factor(ifelse(dataset[,2]=="yes","1","0"))
dataset[,3] <- as.factor(ifelse(dataset[,3]=="yes","1","0"))
dataset[,18] <- as.factor(ifelse(dataset[,18]=="yes","1","0"))
X <- dataset[,-18]
nzro <- nearZeroVar(X)
nzro
X <-X[,-nzro]
View(X)
pairs(X,upper.panel=panel.cor,diag.panel=panel.hist)
## put histograms on the diagonal
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(USJudgeRatings[1:5], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue",
diag.panel = panel.hist, cex.labels = 2, font.labels = 2)
## put (absolute) correlations on the upper panels,
## with size proportional to the correlations.
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(X,upper.panel=panel.cor,diag.panel=panel.hist)
pairs(X,upper.panel=panel.cor,diag.panel=panel.hist)
View(dataset)
View(X)
numerics <- X[,-c(2,3)]
library(corrplot)
corrplot(cor(numerics),method="number")
corrplot(cor(numerics),method="hlclust")
corrplot(cor(numerics),method="color")
corrplot(cor(numerics),method="pir")
corrplot(cor(numerics),method="pie")
corrplot(cor(numerics),method="circle")
numerics <- numerics[,-findCorrelation(cor(numerics))]
View(numerics)
View(dataset)
Y <-dataset[,18]
barplot(table(Y))
trainIndex <- createDataPartition(Y, p = .75,list = FALSE,times = 1)
trainX <-numerics[trainIndex,]
trainY <-Y[trainIndex]
testX <- numerics[-trainIndex,]
testY <- Y[-trainIndex]
ctrl <- trainControl(method = "LGOCV",
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
corrplot(M, method = "color")
M <- cor(numerics)
corrplot(M, method = "color")
trainIndex <- createDataPartition(Y, p = .75,list = FALSE,times = 1)
trainX <-numerics[trainIndex,]
trainY <-Y[trainIndex]
testX <- numerics[-trainIndex,]
testY <- Y[-trainIndex]
rm(list=ls())
library(C50)
library(caret)
data(churn)
dataset <-rbind(churnTrain,churnTest)
dataset<-dataset[,-c(1,3)]
dataset[,2] <- as.factor(ifelse(dataset[,2]=="yes","1","0"))
dataset[,3] <- as.factor(ifelse(dataset[,3]=="yes","1","0"))
dataset[,18] <- as.factor(ifelse(dataset[,18]=="yes","1","0"))
X <- dataset[,-18]
nzro <- nearZeroVar(X)
nzro
X <-X[,-nzro]
View(X)
cor(X)
x[,-2]
X[,-2]
cor(X[,-2])
View(X)
cor(X[,-c(2,3)])
corrplot(cor(X[,-c(2,3)]),method="color")
numerics <- X[,-c(2,3)]
library(corrplot)
M <- cor(numerics)
corrplot(M, method = "color")
numerics <- numerics[,-findCorrelation(cor(numerics))]
Y <-dataset[,18]
barplot(table(Y))
trainIndex <- createDataPartition(Y, p = .75,list = FALSE,times = 1)
trainX <-numerics[trainIndex,]
trainY <-Y[trainIndex]
testX <- numerics[-trainIndex,]
testY <- Y[-trainIndex]
library(corrplot)
corrplot(M, method = "color")
M <- cor(numerics)
corrplot(M, method = "color")
library(corrplot)
library(C50)
library(caret)
library(corrplot)
data(churn)
## put histograms on the diagonal
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(USJudgeRatings[1:5], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue",
diag.panel = panel.hist, cex.labels = 2, font.labels = 2)
## put (absolute) correlations on the upper panels,
## with size proportional to the correlations.
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(numerics,upper.panel=panel.cor,diag.panel=panel.hist)
ctrl <- trainControl(method = "LGOCV",
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
library(caret)
set.seed(476)
glmModel <- train(trainX,y = trainY,method = "glm",metric = "ROC",trControl = ctrl,preProc = c("center", "scale"))
glmModel
glmPred <- predict(glmModel,testX)
confusionMatrix(data=glmPred,reference = testY)
glmModel$pred$obs
Roc <- roc(response = glmModel$pred$obs,
predictor = glmModel$pred$yes,
levels = (levels(glmModel$pred$obs)))
plot(Roc, legacy.axes = TRUE)
auc(Roc)
ctrl <- trainControl(method = "LGOCV",
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
library(caret)
set.seed(476)
glmModel <- train(trainX,y = trainY,method = "glm",metric = "ROC",trControl = ctrl,preProc = c("center", "scale"))
glmModel
glmPred <- predict(glmModel,testX)
confusionMatrix(data=glmPred,reference = testY)
ldaPred <- predict(ldaModel,testX)
ldaModel<- train(x = trainX,y = trainY,method = "lda",metric = "ROC",trControl = ctrl,preProc = c("center", "scale"))
ldaModel
ldaPred <- predict(ldaModel,testX)
confusionMatrix(data=glmPred,reference = testY)
confusionMatrix(data=ldaPred,reference = testY)
plsdaModel <- train(x = trainX,y = trainY,
method = "pls",
tuneGrid = expand.grid(.ncomp = 1:2),
preProc = c("center","scale"),
metric = "ROC",
trControl = ctrl)
plsdaPred <- predict(plsdaModel,testX)
confusionMatrix(data=plsdaPred,reference = testY)
lmnPred <- predict(lmnTuned,testX)
glmnGrid <- expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),.lambda=seq(0.01,0.2,length=40))
lmnTuned <- train(trainX,y = trainY,method = "glmnet",  tuneGrid = glmnGrid,metric = "ROC",trControl = ctrl,preProc = c("center", "scale"))
lmnTuned
lmnPred <- predict(lmnTuned,testX)
confusionMatrix(data=lmnPred,reference = testY)
library(pamr)
nscGrid <- data.frame(.threshold = 0:25)
nscTuned <- train(x = trainX,
y = trainY,
method = "pam",
preProc = c("center", "scale"),
tuneGrid = nscGrid,
metric = "ROC",
trControl = ctrl)
nscTuned
nscPred <- predict(nscTuned,testX)
confusionMatrix(data=nscPred,reference = testY)
rm(list=ls())
library(caret)
data(hepatic)
dataset <- cbind(bio,chem)
library(caret)
data(oil)
barplot(table(oilType))
library(corrplot)
corrplot(cor(fattyAcids), order = "hclust")
fattyAcids <- fattyAcids[,-findCorrelation(cor(fattyAcids))]
library(caret)
data(oil)
barplot(table(oilType))
library(corrplot)
corrplot(cor(fattyAcids), order = "hclust")
fattyAcids <- fattyAcids[,-findCorrelation(cor(fattyAcids))]
trainIndex <- createDataPartition(oilType, p = 0.75,list = FALSE,times = 1)
trainX <-fattyAcids[trainIndex,]
trainY <- as.factor(oilType[trainIndex])
testX<-fattyAcids[-trainIndex,]
testY <-as.factor(oilType[-trainIndex])
nnetGrid <-expand.grid(.size=1:10,.decay=c(0,0.1,1,2))
maxSize <- max(nnetGrid$.size)
numWts <- 1*(maxSize * (length(trainX) + 1) + maxSize + 1)
set.seed(476)
nnetModel <- train(x=trainX,y=trainY,method="nnet",metric="Kappa",tuneGrid=nnetGrid,preProc="spatialSign",trace=FALSE,maxit=200,MaxNWts=numWts)
library(mda)
mdaModel <- train(trainX,y = trainY,method = "mda",metric = "Kappa",tuneGrid = expand.grid(.subclasses=1:10))
mdaModel
mdaPred <-predict(mdaModel,testX)
confusionMatrix(mdaPred,testY)
plsImp <- varImp(mdaModel,scale=FALSE)
plsImp
nnetGrid <-expand.grid(.size=1:10,.decay=c(0,0.1,1,2))
maxSize <- max(nnetGrid$.size)
numWts <- 1*(maxSize * (length(trainX) + 1) + maxSize + 1)
set.seed(476)
nnetModel <- train(x=trainX,y=trainY,method="nnet",metric="Kappa",tuneGrid=nnetGrid,preProc="spatialSign",trace=FALSE,maxit=200,MaxNWts=numWts)
nnetModel
confusionMatrix(predict(nnetModel,testX),testY)
fdaModel <- train(trainX,y = trainY,method = "fda",metric = "Kappa")
fdaModel
fdaPred <-predict(fdaModel,testX)
confusionMatrix(fdaPred,testY)
plsImp <- varImp(fdaModel,scale=FALSE)
library(e1071)
library(kernlab)
library(klaR)
sigmaRange <- sigest(as.matrix(trainX))
svmRGrid <- expand.grid(.sigma = sigmaRange[1],.C = 2^(seq(-4, 4)))
svmRModel <- train(trainX, trainY,method = "svmRadial",metric = "Kappa",tuneGrid = svmRGrid,fit = FALSE)
svmRModel
svmPred<-predict(svmRModel,testX)
confusionMatrix(svmPred,testY)
knnFit <- train(trainX, trainY,method = "knn",metric = "Kappa",tuneGrid = data.frame(.k = c(4*(0:5)+1,20*(1:5)+1,50*(2:9)+1)))
confusionMatrix(knn(trainX,testX,trainY,k=13),testY)
knnFit
confusionMatrix(knn(trainX,testX,trainY,k=1),testY)
NBFit <- train(trainX, trainY,method = "nb",metric = "Kappa")
NBPred<-predict(NBFit,testX)
confusionMatrix(NBPred,testY)
NBFit <- train(trainX, trainY,method = "nb",metric = "Kappa")
NBFit <- train(trainX, trainY,method = "nb",metric = "Kappa")
trainX
nbPredictors <- factorPredictors[factorPredictors %in% fattyAcids]
library(klaR)
nbPredictors <- factorPredictors[factorPredictors %in% fattyAcids]
factor(fattyAcids[,1])
factor(fattyAcids)
rm(list=ls())
library(caret)
data(hepatic)
library(AppliedPredictiveModeling)
data(hepatic)
dataset <- cbind(bio,chem)
nzro <- nearZeroVar(dataset)
length(nzro)
filtereddataset <- dataset[,-nzro]
filtereddataset <- filtereddataset[,-findCorrelation(cor(filtereddataset))]
comboInfo <- findLinearCombos(filtereddataset)
comboInfo$remove
filtereddataset <- filtereddataset[,-comboInfo$remove]
# No linear combinations
preProcValues <- preProcess(filtereddataset, method = c("center", "scale"))
Transformed<- predict(preProcValues, filtereddataset)
trainIndex <- createDataPartition(injury, p = .8,list = FALSE,times = 1)
trainX<-Transformed[trainIndex,]
trainY<-factor(injury[trainIndex])
testX<-Transformed[-trainIndex,]
testY<-factor(injury[-trainIndex])
---------#Does not work---
library(mda)
mdaModel <- train(trainX,y = trainY,method = "mda",metric = "Kappa",tuneGrid = expand.grid(.subclasses=1:10))
mdaModel <- train(trainX,y = trainY,method = "mda",metric = "Kappa")
mdaModel <- train(trainX,y = trainY,method = "mda")
View(Transformed)
fdaModel <- train(trainX,y = trainY,method = "fda",metric = "Kappa")
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
data(hepatic)
dataset <- cbind(bio,chem)
nzro <- nearZeroVar(dataset)
length(nzro)
filtereddataset <- dataset[,-nzro]
filtereddataset <- filtereddataset[,-findCorrelation(cor(filtereddataset))]
comboInfo <- findLinearCombos(filtereddataset)
comboInfo$remove
filtereddataset <- filtereddataset[,-comboInfo$remove]
preProcValues <- preProcess(filtereddataset)
Transformed<- predict(preProcValues, filtereddataset)
trainIndex <- createDataPartition(injury, p = .8,list = FALSE,times = 1)
trainX<-Transformed[trainIndex,]
trainY<-factor(injury[trainIndex])
testX<-Transformed[-trainIndex,]
testY<-factor(injury[-trainIndex])
library(mda)
mdaModel <- train(trainX,y = trainY,method = "mda")
library(AppliedPredictiveModelling)
library(AppliedPredictiveModeling)
setwd("~/Google Drive/course work/Predictive Modeling/chap 13")
ibrary("caret")
library("AppliedPredictiveModeling")
data(hepatic)
barplot(table(injury))
nzro <- nearZeroVar(bio)
length(nzro)
dim(bio[,-nzro])
filteredbio <- bio[,-nzro]
filteredbio <- filteredbio[,-findCorrelation(cor(filteredbio))]
comboInfo <- findLinearCombos(filteredbio)
nzro <- nearZeroVar(bio)
library("caret")
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
data(hepatic)
dataset <- cbind(bio,chem)
zro <- nearZeroVar(dataset)
length(nzro)
filtereddataset <- dataset[,-nzro]
filtereddataset <- filtereddataset[,-findCorrelation(cor(filtereddataset))]
comboInfo <- findLinearCombos(filtereddataset)
comboInfo$remove
filtereddataset <- filtereddataset[,-comboInfo$remove]
# No linear combinations
preProcValues <- preProcess(filtereddataset, method = c("center", "scale"))
Transformed<- predict(preProcValues, filtereddataset)
trainIndex <- createDataPartition(injury, p = .8,list = FALSE,times = 1)
library(caret)
nzro <- nearZeroVar(dataset)
length(nzro)
filtereddataset <- dataset[,-nzro]
filtereddataset <- filtereddataset[,-findCorrelation(cor(filtereddataset))]
comboInfo <- findLinearCombos(filtereddataset)
comboInfo$remove
filtereddataset <- filtereddataset[,-comboInfo$remove]
# No linear combinations
preProcValues <- preProcess(filtereddataset, method = c("center", "scale"))
Transformed<- predict(preProcValues, filtereddataset)
trainIndex <- createDataPartition(injury, p = .8,list = FALSE,times = 1)
trainX<-Transformed[trainIndex,]
trainY<-factor(injury[trainIndex])
testX<-Transformed[-trainIndex,]
testY<-factor(injury[-trainIndex])
rm(list=ls())
dataset <- cbind(bio,chem)
library(caret)
library(AppliedPredictiveModeling)
data(hepatic)
dataset <- cbind(bio,chem)
dataset[,1]
dataset[,281]
mdaModel <- train(dataset,y = injury,method = "mda",metric = "Kappa",tuneGrid = expand.grid(.subclasses=1:10))
nzro <- nearZeroVar(dataset)
length(nzro)
filtereddataset <- dataset[,-nzro]
filtereddataset <- filtereddataset[,-findCorrelation(cor(filtereddataset))]
comboInfo <- findLinearCombos(filtereddataset)
comboInfo$remove
filtereddataset <- filtereddataset[,-comboInfo$remove]
# No linear combinations
preProcValues <- preProcess(filtereddataset, method = c("center", "scale"))
Transformed<- predict(preProcValues, filtereddataset)
trainIndex <- createDataPartition(injury, p = .8,list = FALSE,times = 1)
trainX<-Transformed[trainIndex,]
trainY<-factor(injury[trainIndex])
testX<-Transformed[-trainIndex,]
testY<-factor(injury[-trainIndex])
fdaModel <- train(trainX,y = trainY,method = "fda",metric = "Kappa")
fdaModel
fdaPred <-predict(fdaModel,testX)
confusionMatrix(fdaPred,testY)
plsImp <- varImp(fdaModel,scale=FALSE)
plsImp
plsImp <- varImp(fdaModel,scale=FALSE)
plsImp
NBFit <- train(trainX, trainY,method = "nb",metric = "Kappa")
NBPred<-predict(NBFit,testX)
confusionMatrix(NBPred,testY)
rm(list=ls())
library(caret)
data(oil)
barplot(table(oilType))
library(corrplot)
corrplot(cor(fattyAcids), order = "hclust")
fattyAcids <- fattyAcids[,-findCorrelation(cor(fattyAcids))]
trainIndex <- createDataPartition(oilType, p = 0.75,list = FALSE,times = 1)
trainX <-fattyAcids[trainIndex,]
trainY <- as.factor(oilType[trainIndex])
testX<-fattyAcids[-trainIndex,]
testY <-as.factor(oilType[-trainIndex])
NBFit <- train(trainX, trainY,method = "nb",metric = "Kappa")
trainY
NBFit <- train(trainX, as.factors(trainY),method = "nb",metric = "Kappa")
NBFit <- train(trainX, as.factor(trainY),method = "nb",metric = "Kappa")
trainX
library(mda)
install.packages("mda")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(caret)
#---------#MDA---
library(mda)
mdaModel <- mda(trainY~.,data=train)
mdaModel
mdaPred <-predict(mdaModel,testX)
confusionMatrix(mdaPred,testY)
library(AppliedPredictiveModeling)
library(caret)
data(hepatic)
dataset <- cbind(bio,chem)
nzro <- nearZeroVar(dataset)
length(nzro)
filtereddataset <- dataset[,-nzro]
filtereddataset <- filtereddataset[,-findCorrelation(cor(filtereddataset))]
comboInfo <- findLinearCombos(filtereddataset)
comboInfo$remove
filtereddataset <- filtereddataset[,-comboInfo$remove]
# No linear combinations
preProcValues <- preProcess(filtereddataset, method = c("center", "scale"))
Transformed<- predict(preProcValues, filtereddataset)
trainIndex <- createDataPartition(injury, p = .8,list = FALSE,times = 1)
trainX<-Transformed[trainIndex,]
trainY<-factor(injury[trainIndex])
testX<-Transformed[-trainIndex,]
testY<-factor(injury[-trainIndex])
train<-cbind(trainY,trainX)
#---------#MDA---
library(mda)
mdaModel <- mda(trainY~.,data=train)
mdaModel
mdaPred <-predict(mdaModel,testX)
confusionMatrix(mdaPred,testY)
install.packages("earth")
library(mda)
library(earth)
library(AppliedPredictiveModeling)
library(caret)
data(hepatic)
dataset <- cbind(bio,chem)
nzro <- nearZeroVar(dataset)
length(nzro)
filtereddataset <- dataset[,-nzro]
filtereddataset <- filtereddataset[,-findCorrelation(cor(filtereddataset))]
comboInfo <- findLinearCombos(filtereddataset)
comboInfo$remove
filtereddataset <- filtereddataset[,-comboInfo$remove]
# No linear combinations
preProcValues <- preProcess(filtereddataset, method = c("center", "scale"))
Transformed<- predict(preProcValues, filtereddataset)
trainIndex <- createDataPartition(injury, p = .8,list = FALSE,times = 1)
trainX<-Transformed[trainIndex,]
trainY<-factor(injury[trainIndex])
testX<-Transformed[-trainIndex,]
testY<-factor(injury[-trainIndex])
train<-cbind(trainY,trainX)
