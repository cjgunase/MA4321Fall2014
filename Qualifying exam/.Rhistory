data$education = gsub("^Prof-school","Prof-School",data$education)
data$education = gsub("^Some-college","HS-Graduate",data$education)
data$marital[data$marital=="Never-married"] = "Never-Married"
data$marital[data$marital=="Married-AF-spouse"] = "Married"
data$marital[data$marital=="Married-civ-spouse"] = "Married"
data$marital[data$marital=="Married-spouse-absent"] = "Not-Married"
data$marital[data$marital=="Separated"] = "Not-Married"
data$marital[data$marital=="Divorced"] = "Not-Married"
data$marital[data$marital=="Widowed"] = "Widowed"
data$race[data$race=="White"] = "White"
data$race[data$race=="Black"] = "Black"
data$race[data$race=="Amer-Indian-Eskimo"] = "Amer-Indian"
data$race[data$race=="Asian-Pac-Islander"] = "Asian"
data$race[data$race=="Other"] = "Other"
data[["capital_gain"]] <- ordered(cut(data$capital_gain,c(-Inf, 0,
median(data[["capital_gain"]][data[["capital_gain"]] >0]),
Inf)),labels = c("None", "Low", "High"))
data[["capital_loss"]] <- ordered(cut(data$capital_loss,c(-Inf, 0,
median(data[["capital_loss"]][data[["capital_loss"]] >0]),
Inf)), labels = c("None", "Low", "High"))
is.na(data) = data=='?'
is.na(data) = data==' ?'
data = na.omit(data)
data$marital = factor(data$marital)
data$education = factor(data$education)
data$country = factor(data$country)
data$type_employer = factor(data$type_employer)
data$occupation = factor(data$occupation)
data$race = factor(data$race)
data$sex = factor(data$sex)
data$relationship = factor(data$relationship)
data$income = as.factor(ifelse(data$income==data$income[1],0,1))
data$age = scale(data$age)
data$hr_per_week = scale(data$hr_per_week)
dummy <-dummyVars(income~.-age -hr_per_week,data=data)
newdata<-as.data.frame(predict(dummy,data))
newdata<-cbind(newdata,data$age,data$hr_per_week)
#------------------------------------------
boxplot(data$hr_per_week,"Box plot for hours per week")
boxplot(data$hr_per_week,main="Box plot for hours per week")
center(data$hr_per_week)
library(caret)
trans <- preProcess(segData,method = c("center", "scale"))
trans <- preProcess(data$age,method = c("center", "scale"))
predict(trans,data$age)
data$age = predict(trans,data$age)#scale(data$age)
boxplot(data$age,main="Box plot for age")
trans <- preProcess(data$hr_per_week,method = c("center", "scale"))
trans <- preProcess(data$hr_per_week,method = c("center", "scale"))
data$hr_per_week = predict(trans,data$hr_per_week)#scale(data$hr_per_week)
boxplot(data$hr_per_week,main="Box plot for hours per week")
rm(list=ls())
data = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
testdata = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
data[["education_num"]]=NULL
data[["fnlwgt"]]=NULL
data$type_employer = as.character(data$type_employer)
data$occupation = as.character(data$occupation)
data$country = as.character(data$country)
data$education = as.character(data$education)
data$race = as.character(data$race)
data$marital = as.character(data$marital)
data$type_employer = gsub("^Federal-gov","Federal-Govt",data$type_employer)
data$type_employer = gsub("^Local-gov","Other-Govt",data$type_employer)
data$type_employer = gsub("^State-gov","Other-Govt",data$type_employer)
data$type_employer = gsub("^Private","Private",data$type_employer)
data$type_employer = gsub("^Self-emp-inc","Self-Employed",data$type_employer)
data$type_employer = gsub("^Self-emp-not-inc","Self-Employed",data$type_employer)
data$type_employer = gsub("^Without-pay","Not-Working",data$type_employer)
data$type_employer = gsub("^Never-worked","Not-Working",data$type_employer)
data$occupation = gsub("^Adm-clerical","Admin",data$occupation)
data$occupation = gsub("^Armed-Forces","Military",data$occupation)
data$occupation = gsub("^Craft-repair","Blue-Collar",data$occupation)
data$occupation = gsub("^Exec-managerial","White-Collar",data$occupation)
data$occupation = gsub("^Farming-fishing","Blue-Collar",data$occupation)
data$occupation = gsub("^Handlers-cleaners","Blue-Collar",data$occupation)
data$occupation = gsub("^Machine-op-inspct","Blue-Collar",data$occupation)
data$occupation = gsub("^Other-service","Service",data$occupation)
data$occupation = gsub("^Priv-house-serv","Service",data$occupation)
data$occupation = gsub("^Prof-specialty","Professional",data$occupation)
data$occupation = gsub("^Protective-serv","Other-Occupations",data$occupation)
data$occupation = gsub("^Sales","Sales",data$occupation)
data$occupation = gsub("^Tech-support","Other-Occupations",data$occupation)
data$occupation = gsub("^Transport-moving","Blue-Collar",data$occupation)
data$country[data$country=="Cambodia"] = "SE-Asia"
data$country[data$country=="Canada"] = "British-Commonwealth"
data$country[data$country=="China"] = "China"
data$country[data$country=="Columbia"] = "South-America"
data$country[data$country=="Cuba"] = "Other"
data$country[data$country=="Dominican-Republic"] = "Latin-America"
data$country[data$country=="Ecuador"] = "South-America"
data$country[data$country=="El-Salvador"] = "South-America"
data$country[data$country=="England"] = "British-Commonwealth"
data$country[data$country=="France"] = "Euro_1"
data$country[data$country=="Germany"] = "Euro_1"
data$country[data$country=="Greece"] = "Euro_2"
data$country[data$country=="Guatemala"] = "Latin-America"
data$country[data$country=="Haiti"] = "Latin-America"
data$country[data$country=="Holand-Netherlands"] = "Euro_1"
data$country[data$country=="Honduras"] = "Latin-America"
data$country[data$country=="Hong"] = "China"
data$country[data$country=="Hungary"] = "Euro_2"
data$country[data$country=="India"] = "British-Commonwealth"
data$country[data$country=="Iran"] = "Other"
data$country[data$country=="Ireland"] = "British-Commonwealth"
data$country[data$country=="Italy"] = "Euro_1"
data$country[data$country=="Jamaica"] = "Latin-America"
data$country[data$country=="Japan"] = "Other"
data$country[data$country=="Laos"] = "SE-Asia"
data$country[data$country=="Mexico"] = "Latin-America"
data$country[data$country=="Nicaragua"] = "Latin-America"
data$country[data$country=="Outlying-US(Guam-USVI-etc)"] = "Latin-America"
data$country[data$country=="Peru"] = "South-America"
data$country[data$country=="Philippines"] = "SE-Asia"
data$country[data$country=="Poland"] = "Euro_2"
data$country[data$country=="Portugal"] = "Euro_2"
data$country[data$country=="Puerto-Rico"] = "Latin-America"
data$country[data$country=="Scotland"] = "British-Commonwealth"
data$country[data$country=="South"] = "Euro_2"
data$country[data$country=="Taiwan"] = "China"
data$country[data$country=="Thailand"] = "SE-Asia"
data$country[data$country=="Trinadad&Tobago"] = "Latin-America"
data$country[data$country=="United-States"] = "United-States"
data$country[data$country=="Vietnam"] = "SE-Asia"
data$country[data$country=="Yugoslavia"] = "Euro_2"
data$education = gsub("^10th","Dropout",data$education)
data$education = gsub("^11th","Dropout",data$education)
data$education = gsub("^12th","Dropout",data$education)
data$education = gsub("^1st-4th","Dropout",data$education)
data$education = gsub("^5th-6th","Dropout",data$education)
data$education = gsub("^7th-8th","Dropout",data$education)
data$education = gsub("^9th","Dropout",data$education)
data$education = gsub("^Assoc-acdm","Associates",data$education)
data$education = gsub("^Assoc-voc","Associates",data$education)
data$education = gsub("^Bachelors","Bachelors",data$education)
data$education = gsub("^Doctorate","Doctorate",data$education)
data$education = gsub("^HS-Grad","HS-Graduate",data$education)
data$education = gsub("^Masters","Masters",data$education)
data$education = gsub("^Preschool","Dropout",data$education)
data$education = gsub("^Prof-school","Prof-School",data$education)
data$education = gsub("^Some-college","HS-Graduate",data$education)
data$marital[data$marital=="Never-married"] = "Never-Married"
data$marital[data$marital=="Married-AF-spouse"] = "Married"
data$marital[data$marital=="Married-civ-spouse"] = "Married"
data$marital[data$marital=="Married-spouse-absent"] = "Not-Married"
data$marital[data$marital=="Separated"] = "Not-Married"
data$marital[data$marital=="Divorced"] = "Not-Married"
data$marital[data$marital=="Widowed"] = "Widowed"
data$race[data$race=="White"] = "White"
data$race[data$race=="Black"] = "Black"
data$race[data$race=="Amer-Indian-Eskimo"] = "Amer-Indian"
data$race[data$race=="Asian-Pac-Islander"] = "Asian"
data$race[data$race=="Other"] = "Other"
data[["capital_gain"]] <- ordered(cut(data$capital_gain,c(-Inf, 0,
median(data[["capital_gain"]][data[["capital_gain"]] >0]),
Inf)),labels = c("None", "Low", "High"))
data[["capital_loss"]] <- ordered(cut(data$capital_loss,c(-Inf, 0,
median(data[["capital_loss"]][data[["capital_loss"]] >0]),
Inf)), labels = c("None", "Low", "High"))
is.na(data) = data=='?'
is.na(data) = data==' ?'
data = na.omit(data)
data$marital = factor(data$marital)
data$education = factor(data$education)
data$country = factor(data$country)
data$type_employer = factor(data$type_employer)
data$occupation = factor(data$occupation)
data$race = factor(data$race)
data$sex = factor(data$sex)
data$relationship = factor(data$relationship)
data$income = as.factor(ifelse(data$income==data$income[1],0,1))
data$age = scale(data$age)
data$hr_per_week = scale(data$hr_per_week)
dummy <-dummyVars(income~.-age -hr_per_week,data=data)
newdata<-as.data.frame(predict(dummy,data))
newdata<-cbind(newdata,data$age,data$hr_per_week)
#------------------------------------------
boxplot(data$age,main="Box plot for age")
View(data)
boxplot(testdata$age,main="Box plot for age")
boxplot(data$age,main="Box plot for age")
boxplot(data$hr_per_week,main="Box plot for hours per week")
boxplot(testdata$capital_gain,main="Box plot for capital gain")
boxplot(testdata$capital_gain,main="Box plot for capital gain")
testdata$capital_gain
View(data)
hist(testdata$capital_gain,main="Histogram for Capital gain")
hist(testdata$capital_loss="Histogram for Capital Loss")
hist(testdata$capital_loss,main="Histogram for Capital Loss")
table(barplot(data$capital_gain))
data$capital_gain
barplot(table(data$capital_gain))
barplot(table(data$capital_loss),main="Capital Loss")
barplot(table(data$capital_gain),main="Capital Gain")
barplot(table(data$capital_loss),main="Capital Loss")
table(data$type_employer)
barplot(table(data$type_employer))
barplot(table(data$education))
barplot(table(data$type_employer))
barplot(batable(data$marital))
barplot(table(data$marital))
table(data$marital)
barplot(table(data$marital))
nearZeroVar(data)
par(mfrow=c(2,5))
barplot(table(data$type_employer))
barplot(table(data$education))
barplot(table(data$marital))
barplot(table(data$occupation))
barplot(table(data$relationship))
barplo(table(data$race))
barplot(table(data$sex))
barplot(table(data$capital_gain))
barplot(table(data$capital_loss))
barplot(table(data$country))
barplot(table(data$income))
par(mfrow=c(5,2))
barplot(table(data$type_employer))
barplot(table(data$education))
barplot(table(data$marital))
dev.off
dev.off()
par(mfrow=c(5,2))
barplot(table(data$type_employer))
barplot(table(data$education))
barplot(table(data$marital))
par(mfrow=c(2,5))
barplot(table(data$type_employer))
dev.off()
par(mfrow=c(2,2))
barplot(table(data$type_employer))
barplot(table(data$education))
barplot(table(data$marital))
barplot(table(data$occupation))
par(mfrow=c(2,2))
barplot(table(data$type_employer),main="type_employer")
barplot(table(data$education),main="education")
barplot(table(data$marital),main="martial")
barplot(table(data$occupation),main="occupaion")
par(mfrow=c(2,2))
barplo(table(data$race),main="race")
barplot(table(data$race),main="race")
barplot(table(data$sex),main="sex")
barplot(table(data$capital_gain),main="capital gain")
barplot(table(data$capital_loss),main="capital loss")
dev.off()
par(mfrow=c(2,1))
barplot(table(data$country),main="country")
barplot(table(data$income),main="income")
dev.off()
par(mfrow=c(1,2))
barplot(table(data$country),main="country")
barplot(table(data$income),main="income")
nearZeroVar(data)
names(data)
names(data)[1]
names(data)[9]
names(data)[10]
names(data)[12]
data <-data[,-nearZeroVar(data)]
image(is.na(data), main = "Missing Values", xlab = "Observation", ylab = "Variable",xaxt = "n", yaxt = "n", bty = "n")
axis(1, seq(0, 1, length.out = nrow(data)), 1:nrow(data), col = "white")
data[ data == "?" ] = NA
image(is.na(data), main = "Missing Values", xlab = "Observation", ylab = "Variable",xaxt = "n", yaxt = "n", bty = "n")
axis(1, seq(0, 1, length.out = nrow(data)), 1:nrow(data), col = "white")
dev.off()
data[ data == "?" ] = NA
image(is.na(data), main = "Missing Values", xlab = "Observation", ylab = "Variable",xaxt = "n", yaxt = "n", bty = "n")
dev.off()
data[ data == "?" ] = NA
image(is.na(data), main = "Missing Values", xlab = "Observation", ylab = "Variable",xaxt = "n", yaxt = "n", bty = "n")
axis(1, seq(0, 1, length.out = nrow(data)), 1:nrow(data), col = "white")
View(data)
View(testdata)
testdata[ testdata == "?" ] = NA
View(testdata)
image(is.na(testdata), main = "Missing Values", xlab = "Observation", ylab = "Variable",xaxt = "n", yaxt = "n", bty = "n")
axis(1, seq(0, 1, length.out = nrow(testdata)), 1:nrow(testdata), col = "white")
axis(2, seq(0, 1, length.out = nrow(testdata)), 1:nrow(testdata), col = "white")
axis(2, names(testdata))
names(testdata)
axis(2, seq(1, 1, 15), 1:ncol(testdata), col = "white")
axis(2, seq(0, 1, 15), 1:ncol(testdata), col = "white")
?seq
image(is.na(testdata), main = "Missing Values", xlab = "Observation", ylab = "Variable",xaxt = "n", yaxt = "n", bty = "n")
axis(2, seq(1, 15, 1), 1:ncol(testdata), col = "white")
axis(2, seq(1, 15, 1), 1:ncol(testdata))
axis(1, seq(0, 1, length.out = nrow(testdata)), 1:nrow(testdata), col = "white")
table(data$type_employer)
table(testdata$type_employer)
table(data$education)
testdata = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
sep=",",header=F,col.names=c("age", "type_employer", "fnlwgt", "education",
"education_num","marital", "occupation", "relationship", "race","sex",
"capital_gain", "capital_loss", "hr_per_week","country", "income"),
fill=FALSE,strip.white=T)
table(testdata$type_employer)
testdata[,15]
table(testdata$type_employer)
table(data$education)
table(data$marital)
table(data$occupation)
table(testdata$education)
table(testdata$marital)
table(testdata$occupation)
table(testdata$relationship)
table(testdata$race)
table(testdata$sex)
table(testdata$capital_gain)
table(testtestdata$race)
table(testdata$country)
barplot(table(data$income))
barplot(table(data$income),main="Predictor frequncy distribution")
View(testdata)
barplot(table(data$occupation),main="occupaion")
View(newdata)
View(testdata)
View(data)
trainIndex <- createDataPartition(data$income, p = .75,list = FALSE,times = 1)
y<-data$income
x<-data[,-10]
trainX<-x[trainIndex,]
trainY<-factor(y[trainIndex])
testX<- x[-trainIndex,]
testY<-factor(y[-trainIndex])
dummy <-dummyVars(income~.,data=x)
dummy <-dummyVars(income~.,data=data)
dummy_data<-predict(dummy,data)
dummy_data<-as.data.frame(dummy_data)
View(dummy_data)
xD<-dummy_data[,-40]
trainXD<-xD[trainIndex,]
testXD<- xD[-trainIndex,]
nearZeroVar(trainXD)
trainXD<-trainXD[,-nearZeroVar(trainXD)]
xD<-xD[,-nearZeroVar(xD)]
trainXD<-xD[trainIndex,]
testXD<- xD[-trainIndex,]
ctrl <- trainControl(method = "LGOCV",
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
set.seed(476)
lrModel<- train(trainX,y = trainY,method = "glm",metric = "ROC",trControl = ctrl)
lrModel
ldaModel<- train(x = trainX,y = as.factor(trainY),method = "lda",metric = "ROC",trControl = ctrl)
ldaModel<- train(x = trainXD,y = as.factor(trainY),method = "lda",metric = "ROC",trControl = ctrl)
ldaModel
plsFit <- train(x = trainX,y = trainY,method = "pls",tuneGrid = expand.grid(.ncomp = 1:20),metric = "ROC",trControl = ctrl)
plsFit <- train(x = trainXD,y = trainY,method = "pls",tuneGrid = expand.grid(.ncomp = 1:20),metric = "ROC",trControl = ctrl)
library(pls)
plsFit <- train(x = trainXD,y = trainY,method = "pls",tuneGrid = expand.grid(.ncomp = 1:10),metric = "ROC",trControl = ctrl)
plsFit
lrModel
ldaModel
plsFit
plsImpGrant <- varImp(plsFit, scale = FALSE)
plsImpGrant
glmnGrid <- expand.grid(.alpha = c(0,.2, .6, .8),.lambda=c(.1, .2, length = 20))
glmnTuned <- train(trainX,y = trainY,method = "glmnet",tuneGrid = glmnGrid,metric = "ROC",trControl = ctrl)
glmnTuned <- train(trainXD,y = trainY,method = "glmnet",tuneGrid = glmnGrid,metric = "ROC",trControl = ctrl)
glmnTuned
sparseLdaModel <- sda(x = as.matrix(trainXD),y = trainY,lambda = 0.01,stop = -6)
library(sparseLDA)
sparseLdaModel <- sda(x = as.matrix(trainXD),y = trainY,lambda = 0.01,stop = -6)
sparseLdaModel
nscGrid <- data.frame(.threshold = 0:25)
nscTuned <- train(x = trainXD,y = trainY,method = "pam",preProc = c("center", "scale"),tuneGrid = nscGrid,metric = "ROC",trControl = ctrl)
nscTuned
mdaFit <- train(trainXD, trainY,method = "mda",metric = "ROC",tuneGrid = expand.grid(.subclasses = 1:8),trControl = ctrl)
mdaFit <- train(trainX, trainY,method = "mda",metric = "ROC",tuneGrid = expand.grid(.subclasses = 1:8),trControl = ctrl)
mdaFit
nnetGrid <- expand.grid(.size = 1:3,.decay = c(0, .001,0.1))
maxSize <- max(nnetGrid$.size)
numWts <- 1*(maxSize * (9 + 1) + maxSize + 1)
set.seed(476)
nnetFit <- train(x = trainX,y = trainY,
method = "nnet",
metric = "ROC",
tuneGrid = nnetGrid,
trace = FALSE,
maxit = 1000,
MaxNWts = numWts,
## ctrl was defined in the previous chapter
trControl = ctrl)
nnetGrid <- expand.grid(.size = 1:5,.decay = c(0,0.001,0.1,1))
maxSize <- max(nnetGrid$.size)
numWts <- 1*(maxSize * (9 + 1) + maxSize + 1)
set.seed(476)
nnetFit <- train(x = trainX,y = trainY,
method = "nnet",
metric = "ROC",
tuneGrid = nnetGrid,
trace = FALSE,
maxit = 10000,
MaxNWts = numWts,
## ctrl was defined in the previous chapter
trControl = ctrl)
nnetFit
varImp(nnetFit, scale = FALSE)
mdaFit <- train(trainX, trainY,method = "fda",metric = "ROC",trControl = ctrl)
fdaFit <- train(trainX, trainY,method = "fda",metric = "ROC",trControl = ctrl)
fdaFit
plsImp <- varImp(fdaFit,scale=FALSE)
plsImp
library(e1071)
library(kernlab)
library(klaR)
set.seed(202)
sigmaRange <- sigest(as.matrix(trainX),na.action = na.omit)
svmRGrid <- expand.grid(.sigma = sigmaRange[1],.C = 2^(seq(-4, 4)))
set.seed(476)
svmRModel <- train(trainX, trainY,
method = "svmRadial",
metric = "ROC",
tuneGrid = svmRGrid,
fit = FALSE,
trControl = ctrl)
svmRModel
library(e1071)
library(kernlab)
library(klaR)
set.seed(202)
sigmaRange <- sigest(as.matrix(trainX),na.action = na.omit)
trainX
sigmaRange <- sigest(as.matrix(trainXD),na.action = na.omit)
svmRGrid <- expand.grid(.sigma = sigmaRange[1],.C = 2^(seq(-4, 4)))
set.seed(476)
svmRModel <- train(trainX, trainY,
method = "svmRadial",
metric = "ROC",
tuneGrid = svmRGrid,
fit = FALSE,
trControl = ctrl)
svmRModel
svmRModel <- train(trainXD, trainY,
method = "svmRadial",
metric = "ROC",
tuneGrid = svmRGrid,
fit = FALSE,
trControl = ctrl)
knnFit <- train(trainX, trainY,
method = "knn",
metric = "ROC",
tuneGrid = data.frame(.k = c(2*(0:5)+1,
5*(1:5)+1,
10*(2:9)+1)),
trControl = ctrl)
knnFit <- train(trainX, trainY,
method = "knn",
metric = "ROC",
tuneGrid = data.frame(.k = c(3,5,7,9),
trControl = ctrl)
knnFit
knnFit <- train(trainX, trainY,
method = "knn",
metric = "ROC",
tuneGrid = data.frame(.k = c(3,5,9)),
trControl = ctrl)
knnFit
knnFit <- train(trainXD, trainY,
method = "knn",
metric = "ROC",
tuneGrid = data.frame(.k = c(3,5,9)),
trControl = ctrl)
knnFit
library(klaR)
nb<-naiveBayes(trainX, trainY)
confusionMatrix(predict(nb, testX),testY)
nb
NBFit <- train(trainX, trainY,method = "nb",metric = "ROC",trControl = ctrl)
NBFit <- train(trainX, trainY,method = "nb",metric = "ROC")
ctrl1 <- trainControl(
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
NBFit <- train(trainX, trainY,method = "nb",metric = "ROC",trControl = ctrl1)
confusionMatrix(predict(lrModel, testX),testY)
confusionMatrix(predict(ldaModel, testX),testY)
confusionMatrix(predict(ldaModel, testXD),testY)
confusionMatrix(predict(plsFit, testXD),testY)
confusionMatrix(predict(nnetFit, testXD),testY)
confusionMatrix(predict(nnetFit, testX),testY)
lrModel
ldaModel
plsFit
glmnTuned
nscTuned
nnetFit
fdaFit
svmRModel
svmRModel <- train(trainX, trainY,method = "svmRadial",metric = "Kappa",tuneGrid = svmRGrid,fit = FALSE)
knnFit
NBFit
nb
sigmaRange <- sigest(as.matrix(trainXD),na.action = na.omit)
svmRGrid <- expand.grid(.sigma = sigmaRange[1],.C = 2^(seq(-2, 2)))
set.seed(476)
svmRModel <- train(trainXD, trainY,
method = "svmRadial",
metric = "ROC",
tuneGrid = svmRGrid,
fit = FALSE,
trControl = ctrl)
